generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  phone     String
  password  String
  createdAt DateTime @default(now())
  rentals   Rental[]
}

model Merchant  {
  id        String   @id @default(uuid())
  name      String
  logo      String?
  address   String
  email     String   @unique
  phone     String
  password  String
  createdAt DateTime @default(now())
  vehicles  Vehicle[]
}
model Vehicle {
  id          String      @id @default(uuid())
  name        String
  slug        String      @unique 
  type        VehicleType
  brand       String
  model       String
  description String
  mileage     Float
  costPerDay  Float
  imageUrl    String?
  available   Boolean     @default(true)
  createdAt   DateTime    @default(now())
  rentals     Rental[]
  merchantId  String
  merchant    Merchant    @relation(fields: [merchantId], references: [id])
  // @@index([slug]) // Index for faster lookups by slug
  // @@map("vehicles") // Map to the "vehicles" table in the database
  // @@unique([name, brand, model]) // Ensure unique combination of name, brand, model
  // @@fulltext([name, description]) // Full-text search on name and description
  // @@index([type]) // Index for vehicle type for faster filtering
  // @@index([available]) // Index for availability status for faster filtering
  // @@index([createdAt]) // Index for created date for faster sorting
  // @@index([costPerDay]) // Index for cost per day for faster sorting
  // @@index([mileage]) // Index for mileage for faster filtering  
}

model Rental {
  id        String       @id @default(uuid())
  userId    String
  vehicleId String
  startDate DateTime
  endDate   DateTime
  totalCost Float
  status    RentalStatus @default(PENDING)
  createdAt DateTime     @default(now())
  user      User         @relation(fields: [userId], references: [id])
  vehicle   Vehicle      @relation(fields: [vehicleId], references: [id])
}

enum VehicleType {
  BIKE
  CAR
  CYCLE
}

enum RentalStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}
