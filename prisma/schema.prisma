generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  phone     String
  password  String
  createdAt DateTime @default(now())
  orders    Orders[]
  rentals   Rental[]
}

model Merchant {
  id        String    @id @default(uuid())
  name      String
  logo      String?
  address   String
  email     String    @unique
  phone     String
  password  String
  createdAt DateTime  @default(now())
  vehicles  Vehicle[]
}

model Vehicle {
  id          String      @id @default(uuid())
  name        String
  slug        String      @unique
  type        VehicleType
  brand       String
  model       String
  description String
  mileage     Float
  costPerDay  Float
  imageUrl    String?
  available   Boolean     @default(true)
  createdAt   DateTime    @default(now())
  merchantId  String
  orders      Orders[]
  rentals     Rental[]
  merchant    Merchant    @relation(fields: [merchantId], references: [id])
}

model Rental {
  id        String       @id @default(uuid())
  userId    String
  vehicleId String
  startDate DateTime
  endDate   DateTime
  totalCost Float
  status    RentalStatus @default(PENDING)
  createdAt DateTime     @default(now())
  orders    Orders[]
  user      User         @relation(fields: [userId], references: [id])
  vehicle   Vehicle      @relation(fields: [vehicleId], references: [id])
}

model Orders {
  id             String       @id @default(uuid())
  pickupDate     DateTime
  totalCost      Float
  pickupLocation String
  userId         String
  vehicleId      String
  rentalId       String
  status         RentalStatus @default(PENDING)
  createdAt      DateTime     @default(now())
  rental         Rental       @relation(fields: [rentalId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
  vehicle        Vehicle      @relation(fields: [vehicleId], references: [id])
  payments       Payment[]
}

model Payment {
  id            String        @id @default(uuid())
  orderId       String
  transactionId String
  amount        Float
  status        PaymentStatus @default(PENDING)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  order         Orders        @relation(fields: [orderId], references: [id])
}

enum VehicleType {
  BIKE
  CAR
  CYCLE
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum RentalStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}
